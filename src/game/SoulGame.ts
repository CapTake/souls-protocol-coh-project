/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type KokoroStruct = {
  agi: PromiseOrValue<BigNumberish>;
  cha: PromiseOrValue<BigNumberish>;
  con: PromiseOrValue<BigNumberish>;
  dex: PromiseOrValue<BigNumberish>;
  it: PromiseOrValue<BigNumberish>;
  str: PromiseOrValue<BigNumberish>;
  wis: PromiseOrValue<BigNumberish>;
  gen: PromiseOrValue<BigNumberish>;
};

export type KokoroStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  agi: number;
  cha: number;
  con: number;
  dex: number;
  it: number;
  str: number;
  wis: number;
  gen: number;
};

export interface SoulGameInterface extends utils.Interface {
  functions: {
    "exists(uint256)": FunctionFragment;
    "incarnate(uint256)": FunctionFragment;
    "incarnates()": FunctionFragment;
    "progress(uint256)": FunctionFragment;
    "resetProgress(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "exists"
      | "incarnate"
      | "incarnates"
      | "progress"
      | "resetProgress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incarnate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incarnates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "progress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetProgress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incarnate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incarnates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "progress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetProgress",
    data: BytesLike
  ): Result;

  events: {
    "SoulReIncarnated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SoulReIncarnated"): EventFragment;
}

export interface SoulReIncarnatedEventObject {
  owner: string;
  id: BigNumber;
}
export type SoulReIncarnatedEvent = TypedEvent<
  [string, BigNumber],
  SoulReIncarnatedEventObject
>;

export type SoulReIncarnatedEventFilter =
  TypedEventFilter<SoulReIncarnatedEvent>;

export interface SoulGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SoulGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exists(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incarnate(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incarnates(overrides?: CallOverrides): Promise<[BigNumber]>;

    progress(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[KokoroStructOutput]>;

    resetProgress(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  exists(
    _soulId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incarnate(
    _soulId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incarnates(overrides?: CallOverrides): Promise<BigNumber>;

  progress(
    _soulId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<KokoroStructOutput>;

  resetProgress(
    _soulId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    exists(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incarnate(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    incarnates(overrides?: CallOverrides): Promise<BigNumber>;

    progress(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<KokoroStructOutput>;

    resetProgress(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SoulReIncarnated(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): SoulReIncarnatedEventFilter;
    SoulReIncarnated(
      owner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): SoulReIncarnatedEventFilter;
  };

  estimateGas: {
    exists(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incarnate(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incarnates(overrides?: CallOverrides): Promise<BigNumber>;

    progress(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resetProgress(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exists(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incarnate(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incarnates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    progress(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetProgress(
      _soulId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
